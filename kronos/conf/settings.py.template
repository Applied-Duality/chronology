import re
from uuid import getnode

# Backends.
storage = {
  'cassandra_timewidth': {
    'backend': 'cassandra.TimeWidthCassandraStorage',
    'hosts': ['localhost:9160'],
    'keyspace': 'kronos_tw',
    'replication_factor': 0, # Set to a value greater than 0 or you will get an UnavailableException
    'default_timewidth_seconds': 86400,
    'default_shards_per_bucket': 5
  },
  'memory': {
    'backend': 'memory.InMemoryStorage',
    'default_max_items': 1000
  },
}

# Node related settings. `id` should be a unique name that identifies this
# Kronos instance, while `name` is simply a more human readable name.
node = {
  'id':  hex(getnode()), # Unique ID for this Kronos server.
  'greenlet_pool_size': 20, # Greenlet poolsize per process.
  'log_directory': 'log',
  'cors_whitelist_domains' : map(re.compile, [
    # Domains that match any regex in this list will be allowed to talk to this
    # Kronos instance
  ])
}

# Stream settings.
# `fields` maps what keys the ID and timestamp should be assigned to in an event
# JSON.
# 
# `format` specifies what a valid stream name looks like. Kronos will use the
# stream name as part of the key that events are stored under for each backend.
# Ensure that each backend that you use accepts patterns defined by `format`.
stream = {
  'fields': {
    'id': '@id',
    'timestamp': '@time'
  },
  'format': re.compile(r'^[a-z0-9\_]+(\.[a-z0-9\_]+)*$', re.I)
}

streams_to_backends = {
  '*': {
    'backends': {
      'memory': None
    },
    'read_backend': 'memory'
  }
}

# TODO(usmanm): Add configuration for logging events for Kronos itself.

